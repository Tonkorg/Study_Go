package main

import (
	"fmt"
	"math"
)

var (
	name string = "Dima"
	age  int    = 23
)

/*
Напишите программу, которая последовательно делает следующие операции с введённым числом:

Число умножается на 2;
Затем к числу прибавляется 100.
*/
func stepic_1_5_11() {
	var a int
	fmt.Scan(&a)
	a *= 2
	a += 100
	fmt.Println(a)
}

/*
Петя торопился в школу и неправильно написал программу,
которая сначала находит квадраты двух чисел, а затем их суммирует. Исправьте его программу.
*/
func stepic_1_5_12() {

	var a int
	var b int
	fmt.Scan(&a) // считаем переменную 'a' с консоли
	fmt.Scan(&b) // считаем переменную 'b' с консоли

	a = a * a
	b = b * b
	c := a + b
	fmt.Println(c)
}

/*
По данному целому числу, найдите его квадрат.
*/

func stepic_1_5_13() {

	var b int
	fmt.Scan(&b)
	b = b * b
	fmt.Println(b)

}

//Дано натуральное число, выведите его последнюю цифру.

func stepic_1_5_14() {

	var b int
	fmt.Scan(&b)
	b %= 10
	fmt.Println(b)
}

//Дано неотрицательное целое число. Найдите число десятков (то есть вторую цифру справа).

func stepic_1_5_15() {

	var b int
	fmt.Scan(&b)

	fmt.Println(b % 100 / 10)
}

//Часовая стрелка повернулась с начала суток на d градусов. Определите, сколько сейчас целых часов h и целых минут m.

func stepic_1_5_16() {

	var angle int
	fmt.Scan(&angle)

	fmt.Println("It is", angle/30, "hours", angle*2%60, "minutes.")
}

/*
На ввод подается целое число. Если число положительное - вывести сообщение
"Число положительное", если число отрицательное - "Число отрицательное".
Если подается ноль - вывести сообщение "Ноль". Выводить сообщение без кавычек.
*/

func stepic_1_9_5() {

	var a int
	fmt.Scan(&a)
	if a < 0 {
		fmt.Println("Число положительное")
	} else if a < 0 {
		fmt.Println("Число отрицательное")
	} else if a == 0 {
		fmt.Println("Ноль")
	}
}

// По данному трехзначному числу определите, все ли его цифры различны.
func stepic_1_9_6() {
	var a int
	fmt.Scan(&a)
	if a%10 != a%100/10 && a%10 != a/100 && a%100/10 != a/100 {
		fmt.Println("YES")
	} else {
		fmt.Println("NO")
	}
}

//Дано неотрицательное целое число. Найдите и выведите первую цифру числа.

func stepic_1_9_7() {
	var a int
	fmt.Scan(&a)
	if a == 10000 {
		fmt.Println(a / 10000)
	} else if a < 10000 && a >= 1000 {
		fmt.Println(a / 1000)
	} else if a < 1000 && a >= 100 {
		fmt.Println(a / 100)
	} else if a < 100 && a >= 10 {
		fmt.Println(a / 10)
	} else if a < 10 {
		fmt.Println(a)
	}

}

func stepic_1_9_8() {

	var a string
	fmt.Scan(&a)

	if int((a[0]))+int(a[1])+int(a[2]) == int(a[3])+int(a[4])+int(a[5]) {
		fmt.Println("YES")
	} else {
		fmt.Println("NO")
	}
}

func stepic_1_9_8_v2() {
	var s string
	fmt.Scan(&s)
	if s[0]+s[1]+s[2] == s[3]+s[4]+s[5] {
		fmt.Print("YES")
	} else {
		fmt.Print("NO")
	}
}

/*
Требуется определить, является ли данный год високосным, напомним:
Год является високосным если он соответствует хотя бы одному из нижеперечисленных условий:
- кратен 400;
- кратен 4, но не кратен 100.
*/
func stepic_1_9_9() {
	var a int
	fmt.Scan(&a)
	if a%400 == 0 || (a%4 == 0 && a%100 != 0) {
		fmt.Println("YES")
	} else {
		fmt.Println("NO")
	}
}

// Напишите программу, которая выводит квадраты натуральных чисел от 1 до 10. Квадрат каждого числа должен выводится в новой строке.
func stepic_1_10_2() {

	for a := 1; a <= 10; a++ {
		fmt.Println(a * a)
	}
}

/*
Требуется написать программу, при выполнении которой с клавиатуры
считываются два натуральных числа A и B (каждое не более 100, A < B).
Вывести сумму всех чисел от A до B  включительно.
*/
func stepic_1_10_3() {
	var a, b int
	fmt.Scanf("%d %d", &a, &b)
	var sum = 0
	for ; a <= b; a++ {
		sum += a
	}
	fmt.Println(sum)
}

/*
Напишите программу, которая в последовательности чисел находит сумму двузначных чисел,
кратных 8. Программа в первой строке получает на вход число n - количество чисел в
последовательности, во второй строке -- n чисел, входящих в данную последовательность.
*/

func stepic_1_10_4() {
	var num, count int
	fmt.Scan(&num)
	var sum = 0
	for i := 0; i < num; i++ {
		fmt.Scanf("%d", &count)
		if count%8 == 0 && count > 9 && count < 100 {
			sum += count
		}
	}
	fmt.Println(sum)
}

/*
Последовательность состоит из натуральных чисел и завершается числом 0.
Определите количество элементов этой последовательности, которые равны ее наибольшему элементу.
*/
func stepic_1_10_5() {
	var maximum = 0
	var count = 0
	var res int
	for {
		fmt.Scan(&res)
		if res == 0 {
			break
		} else {
			if res > maximum {
				count = 1
				maximum = res
			} else if res == maximum {
				count++
			} else {
				continue
			}
		}
	}
	fmt.Println(count)
}

/*
Найдите первое число от 1 до n включительно, кратное c, но НЕ кратное d.
*/
func stepic_1_10_7() {

	var a, b, c int
	fmt.Scan(&a, &b, &c)

	for i := 1; i < a; i++ {
		if i%b == 0 && i%c != 0 {
			fmt.Println(i)
			break
		}
	}
}

/*

Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

Для каждого введённого числа проверить:

если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.
*/

func stepic_1_10_8() {

	for {
		var a int
		fmt.Scan(&a)
		if a < 10 {
			continue
		} else if a > 100 {
			break
		} else {
			fmt.Println(a)
		}
	}

}

/*
Вклад в банке составляет x рублей. Ежегодно он увеличивается на p процентов,
после чего дробная часть копеек отбрасывается. Каждый год сумма вклада становится больше.
Определите, через сколько лет вклад составит не менее y рублей.
*/

func stepic_1_10_9() {
	var x, p, y float64
	year := 0
	fmt.Scan(&x, &p, &y)
	for {
		if x < y {
			year++
			x = x + x*(p/100.0)
		} else {
			break
		}
	}
	fmt.Println(year)
}

/*
На вход подается число типа float64. Вам нужно вывести преобразованное число по правилу:
число возводится в квадрат, затем обрезается дробная часть так что остается 4 знака после запятой.
Но если число равно или меньше нуля - выводить:
"число R не подходит", где R - исходное число с 2 цифрами после запятой и с 2 по ширине.
А если число больше чем 10 000 - выводить исходное число в экспоненциальном представлении
(знак экспоненты в нижнем регистре).
*/

func stepic_1_11_3() {
	var num float64

	fmt.Scan(&num)

	if num <= 0 {
		fmt.Printf("число %.2f не подходит\n", num)
	} else if num > 10000 {
		fmt.Printf("%e\n", num)
	} else {
		squared := num * num
		fmt.Printf("%.4f\n", math.Floor(squared*10000)/10000)
	}
}

/*

Внутри функции main (объявлять функцию не нужно) необходимо написать программу:

На первом этапе на стандартный ввод подается 10 целых положительных чисел, которые должны быть записаны
в порядке ввода в массив из 10 элементов. Тип чисел, входящих в массив, должен соответствовать минимально
возможному целому беззнаковому числу. Имя массива который вы должны сами создать workArray (условие обязательное).
Для чтения из стандартного ввода уже импортирован пакет fmt.

На втором этапе на стандартный ввод подаются еще 3 пары чисел - индексы элементов этого массива,
которые требуется поменять местами (если такая пара чисел 3 и 7, значит в массиве элемент с 3 индексом
нужно поменять местами с элементом, индекс которого 7).

Элементы полученного массива должны быть выведены через пробел на стандартный вывод.
Далее автоматически будет проведена проверка используемых типов, результат которой будет добавлен к вашему ответу.
*/

func stepic_1_12_5() {
	var workArray [10]uint8
	var temp1, temp2 uint8
	for i := range workArray {
		fmt.Scan(&temp1)
		workArray[i] = temp1
	}
	for i := 0; i < 3; i++ {
		fmt.Scan(&temp1)
		fmt.Scan(&temp2)
		workArray[temp1], workArray[temp2] = workArray[temp2], workArray[temp1]
	}
	for i := range workArray {
		fmt.Print(workArray[i], " ")
		fmt.Print(" ")
	}

}

func myTest1() {
	a := [10]int{}
	var b = a
	b[1] = 202
	var c [10]int
	c = a
	c[1] = 200
	fmt.Println(a, b, c)

}

func stepic_1_12_13() {

	var a int
	fmt.Scan(&a)

	mas := make([]int, a)

	for i := 0; i < a; i++ {
		fmt.Scan(a)
		mas[i] = a
	}
	fmt.Println(mas[3])
}

func stepic_1_12_14() {
	array := [5]int{}
	var a int
	var m = -200000
	for i := 0; i < 5; i++ {
		fmt.Scan(&a)
		array[i] = a

		if m <= array[i] {
			m = array[i]
		}
	}
	fmt.Println(m)
}

//Дан массив, состоящий из целых чисел. Нумерация элементов начинается с 0.
//Напишите программу, которая выведет элементы массива, индексы которых четны (0, 2, 4...).

func stepic_1_12_15() {

	var a int
	fmt.Scan(&a)

	var b = make([]int, a)

	for i := 0; i < a; i++ {
		fmt.Scan(&b[i])
		if i%2 == 0 {
			fmt.Print(b[i], " ")
		}
	}
}

//Дана последовательность, состоящая из целых чисел. Напишите программу,
//которая подсчитывает количество положительных чисел среди элементов последовательность

func stepic_1_12_16() {

	var a, count int
	fmt.Scan(&a)

	var b = make([]int, a)

	for i := 0; i < a; i++ {
		fmt.Scan(&b[i])
		if b[i] > 0 {
			count++

		}
	}
	fmt.Println(count)
} // можно было закидывать в массив только положительные числа, а потом выкидывать чисто длину массива

func stepic_1_13_1() {

}
